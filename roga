const prompts = require('prompts');
const consola = require('consola');
const mongoose = require('mongoose');
const dotEnv = require('dotenv');

const User = require('./models/user');

dotEnv.config({ path: './config/config.env' });

const questions = [
	{
		type: 'text',
		name: 'fullname',
		message: 'What is fullname ?',
		validate: (value) => {
			if (value.length < 5) {
				return 'fullname is required';
			}
			return true;
		},
	},
	{
		type: 'text',
		name: 'email',
		message: 'whats your email ?',
		validate: (value) => {
			if (value.length < 10) {
				return 'email is required';
			}
			regex =
				/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
			if (!value.match(regex)) {
				return 'please enter a valid email address';
			}
			return true;
		},
	},
	{
		type: 'password',
		name: 'password',
		message: 'enter the password',
		validate: (value) => {
			if (value.length < 4) {
				return 'password is required';
			}
			return true;
		},
	},
	{
		type: 'password',
		name: 'confirmPassword',
		message: 'enter the confirm password',
		validate: (value) => {
			if (value.length < 4) {
				return 'confirm password is required';
			}
			return true;
		},
	},
];

(async () => {
	const { fullname, email, password, confirmPassword } = await prompts(
		questions,
	);
	if (password !== confirmPassword) {
		consola.error('passwords do not match');
		return;
	}
	try {
		await mongoose.connect(process.env.MONGO_URI, {
			useNewUrlParser: true,
			useUnifiedTopology: true,
		});
		const user = await User.findOne({ email });
		if (user) {
			consola.error('user already exists');
			process.exit(1);
		}
		await User.create({ fullname, email, password, role: 'admin' });
		consola.success('super user created !');
		process.exit(0);
	} catch (error) {
		consola.error(error);
		process.exit(1);
	}
})();
